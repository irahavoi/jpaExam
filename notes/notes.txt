em.getReference() <-- will return the proxy of the asked entity containing info about the key only.

Relationship maintenance is the responsibility of the application. 
If the entity to be removed is the target of foreign keys in other tables, those foreign keys must be cleared
for the remove to succeed:

Employee emp = em.find(Employee.class, empId);
ParkingSpace ps = emp.getParkingSpace();
emp.setParkingSpace(null);
em.remove(ps);

Cascading Operations: JPA provides a mechanism to define when operations such as persist should be automatically cascaded across relationships.
The "cascade" attribute in all the logical relationship annotations(@OneToOne, @OneToMany, @ManyToOne, and @ManyToMany), defines the list of entity manager
operations to be cascaded:
	@ManyToOne(cascade = CascadeType.ALL)
                             CascadeType.DETACH
                             CascadeType.MERGE
                             CascadeType.PERSIST
                             CascadeType.REFRESH
                             CascadeType.REMOVE

Cascade Persist:

@Entity
public class Employee {
 // ...
@ManyToOne(cascade=CascadeType.PERSIST)
Address address;
 // ...
}

As the entity manager encounters the Employee instance and
adds it to the persistence context, it will navigate across the address relationship looking for a new
Address entity to manage as well. This frees us from having to persist the Address separately.

Cascade settings are unidirectional.

In the “Persisting an Entity” section, we mentioned that the entity instance is ignored if it is
already persisted. This is true, but the entity manager will still honor the PERSIST cascade in this
situation.
For example, consider our Employee entity again. If the Employee instance is already managed, and a
new Address instance is set in it, invoking persist() again on the Employee instance will cause the
Address instance to become managed. No changes will be made to the Employee instance because it
is already managed.



Cascade Remove:
There are only 2 cases when cascading remove operation is appropriate: one-to-one and one-to-many relationships, in which
there is a clear parent-child relationship. It can’t be blindly applied to all one-to-one and one-tomany
relationships because the target entities might also be participating in other relationships or
might make sense as stand-alone entities.

Listing  cascade operations:
@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})


Clearing the persistence Context:
This is usually required only for application-managed and extended persistence contexts that are long-lived
and have grown too large. For example, consider an application-managed entity manager that issues
a query returning several hundred entity instances. If you don’t want to close the persistence context, you need to be
able to clear out the managed entities, or else the persistence context will continue to grow over time.
	EntityManager.clear();
This is similar to transaction rollback. It detaches all managed entities. 
But if this is done in the middle of transaction commit and some changes have been written to the database, they will not be rollbacked.


Synchronization with the database. (page 185 of 538)
	flush() <-- manual flushing of the persistence context.
Most persistence providers defer
SQL generation to the last possible moment for performance reasons, but this is not guaranteed.

A flush basically consists of three components: new entities
that need to be persisted, changed entities that need to be updated, and removed entities that need to
be deleted from the database.

If an entity points to another
entity that is not managed or has been removed, an exception can be thrown.

it is always safer to update relationships pointing to
entities that will be removed before carrying out the remove() operation. A flush can occur at any time,
so invoking remove() on an entity without clearing any relationships that point to the removed entity
could result in an unexpected IllegalStateException exception if the provider decides to flush the
persistence context before you get around to updating the relationships

Detachment and Merging:
detached entity is one that is no longer associated with a persistence context. It was
managed at one point, but the persistence context might have ended or the entity might have been
transformed so that it has lost its association with the persistence context that used to manage it.
The persistence context, if there still is one, is no longer tracking the entity.
Any changes made to the
entity won’t be persisted to the database, but all the state that was there on the entity when it was
detached can still be used by the application.

The opposite of detachment is merging. Merging is the process by which an entity manager
integrates detached entity state into a persistence context. Any changes to entity state that were made
on the detached entity overwrite the current values in the persistence context. When the transaction
commits, those changes will be persisted. Merging allows entities to be changed “offline” and then
have those changes incorporated later on.

Entities become detached when: 
	* transaction commits;
	* if the persistence context is closed;
	* if the stateful session bean with the extended context is removed;
	* if clear() method is called on the entity manager;
	* if the detach method is called on the entity manager (detaches the passed entity. cascading might be applied if DETACH or ALL option is set)
	* if transaction rollback occurs;
	* when entity is serialized, it's serialized form becomes detached;


@ManyToOne and @OneToOne are eagerly loaded by default;
@oneToMany is lazy loaded by default;

If the entity becomes detached and it's lazy-loaded children have not been accessed, we have a problem: 
the behavior of accessing an unloaded attribute when the entity is detached is not defined.

Some vendors might attempt to resolve the relationship, while others might simply throw an exception or
leave the attribute uninitialized.



Merging detached Entities:
The merge() operation is used to merge the state of a detached entity into a persistence context.
changes made to the instance while it was detached will be written to the database.

WRONG:
public void updateEmployee(Employee emp) {
  em.merge(emp); //<-- Only changes made to the emp object prior to merging will be persisted
  emp.setLastAccessTime(new Date()); //<--- THIS CHANGE WILL NOT BE PERISTED. THE ARGUMENT TO merge() DOES NOT BECOME MANAGED. 
	//A DIFFERENT MANAGED ENTITY IS UPDATED TO MATCH THE ARGUMENT. AND THEN THIS ENTITY IS RETURNED FROMM merge()
}


RIGHT:
public void updateEmployee(Employee emp) {
  Employee managedEmp = em.merge(emp);
  managedEmp.setLastAccessTime(new Date());
}

When merge() is invoked on a new entity, it behaves similarly to the persist() operation. It adds
the entity to the persistence context, but instead of adding the original entity instance, it creates a new
copy and manages that instance instead. The copy that is created by the merge() operation is persisted
as if the persist() method were invoked on it.

If the entity has a
relationship to an object that has no persistent identity, the outcome of the merge operation is
undefined.

The merge() operation can be optionally
cascaded in these cases to prevent an exception from occurring.

Merging detached entities with relationships can be a tricky operation. Ideally, we want to merge
the root of an object graph and have all related entities get merged in the process. This can work, but
only if the MERGE cascade setting has been applied to all relationships in the graph. If it hasn’t, you must
merge each instance that is the target of a non-cascaded relationship one at a time.



Working with Detached Entities (page 192)
Real-life example:
There is an Employee entity that has a collection of Departments. EJB fetches all employees and passes them to the Servlet. Servlet sets employees
as http request attribute and passes it to the jsp. Jsp tries to display department names. Here the problem occurs, since Employees are already detached at the moment 
when jsp gets them and departments are lazy-loaded.

Possible solutions: 
1. Eager loading. (mark departments as eagerly loaded)
2. While employees are still not detached, call getDepartments() method in order to trigger lazy-loading of the departments (ejb level).
3. Avoiding detachment. 
	a. Either do not work with entities in your jsp at all (copy entity data into some other structure - Transfer Object pattern. 
	Or use projection queries to retrieve the state of the entity you need). 
	b. Or keep persistence context open while the jsp renders so that lazy-loaded relationships could be resolved 
	(does not work with remote clients or when entities have to be serialized).

In order to keep the transaction-scoped persistence context open, the transaction must be started in the web layer and then re-used at the business layer and
not committed until jsp is rendered. This pattern is called Transaction View.

@Resource UserTransaction tx;
@EJB EmployeeService bean;

try {
  tx.begin();
  List emps = bean.findAll();
  request.setAttribute("employees", emps);
  getServletContext().getRequestDispatcher("/listEmployees.jsp")
  .forward(request, response);
} finally {
  tx.commit();
}
// ...


The downside of this approach is that the servlet must now manage transaction lifecycle. + this logic must be duplicated across different servlets.
Another option might be to use extended entity manager which lives as long as it's stateful session bean exists.






