JPA supports two methods for expressing queries to retrieve entities and other persistent data from the database: query languages and the criteria API.
JP QL - Java persistence Query Language.
SELECT e FROM Employee e
Instead of selecting from a table, an entity from the application domain model has been specified instead.

SELECT e.name FROM Employee e  <--fetching a field 
SELECT e.department FROM Employee e <-- fetching a related entity

--------------------------------------------------------------------------------------------------------------------------------------------------------


Filtering Results:

SELECT e
FROM Employee e
WHERE e.department.name = 'NA42' AND
      e.address.state IN ('NY', 'CA')

--------------------------------------------------------------------------------------------------------------------------------------------------------

Projecting results:
If you do not need the whole entity, you can return only a subset of the properties from an entity:
SELECT e.name, e.salary 
FROM Employee e

--------------------------------------------------------------------------------------------------------------------------------------------------------

Join entities:

SELECT p.number
FROM Employee e, Phone p
WHERE e = p.employee AND
      e.department.name = 'NA 42' AND
      p.type = 'Cell'

Or using join:

SELECT p.number
FROM Employee e JOIN e.phones p
WHERE e.department.name = 'NA42' AND
   p.type = 'Cell'

--------------------------------------------------------------------------------------------------------------------------------------------------------

Aggregate queries (p.210 of 538)
There are 5 supported aggregate functions: AVG, COUNT, MIN, MAX, SUM.
Results may be grouped using GROUP BY and filtered using the HAVING clause..

SELECT d, COUNT(e), MAX(e.salary), AVG(e.salary)
FROM Department d JOIN d.employees e
GROUP BY d
HAVING COUNT(e) >= 5

--------------------------------------------------------------------------------------------------------------------------------------------------------

Query Parameters:
There are 2 types of parameters: positional (index) binding and named parameters.
Positional parameters:
SELECT e
FROM Employee e
WHERE e.department = ?1 AND
  e.salary > ?2

Named parameters (colon notation):
SELECT e
FROM Employee e
WHERE e.department = :dept AND
  e.salary > :base

--------------------------------------------------------------------------------------------------------------------------------------------------------

Defining Queries:

JPA provides Query and TypedQuery interfaces for executing queries. 
Query is used in cases when result is object.
TypedQUery is used when typed results are preferred.

Implementation of these interfaced is obtained through EntityManager's factory methods.

A query may be dynamically spesified at runtime or configured in persistence unit metadata (annotation or XML) and referenced by name.
Named queries are static and unchangeable but are more efficient to execute because the persistence provider can translate JP QL strings into SQL
once when the app starts as opposed to every time the query is executed (in case of dynamic queries).

--------------------------------------------------------------------------------------------------------------------------------------------------------

Dynamic Query Definition:

Query engine will have to parse the JP QL string into syntax tree, get the object-relational metadata for each entity in each expression and then
generate the equivalent SQL. (affects performance). For application issuing many queries, the performance cost of dynamic query processing may be an issue.

Many query engines will cache the translated sql for later use. But not if the app does not use parameter binding and concatenates parameter values directly
into query strings. 








