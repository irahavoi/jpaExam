Packaging and Deployment (p. 435)
----------------------------------------------------
persistence.xml - primary coonfig file - defines persistence units.

Since there is one EntityManagerFactory for each persistence unit, you
can think of the configuration of the persistence unit as the configuration of the factory for that
persistence unit

While some providers might still require an additional providerspecific
configuration file, most will also support their properties being specified within the properties
section (described in the “Adding Vendor Properties” section) of the persistence.xml file.
The persistence.xml file is the first step to configuring a persistence unit. All the information
required for the persistence unit should be specified in the persistence.xml file. Once a packaging
strategy has been chosen, the persistence.xml file should be placed in the META-INF directory of the
chosen archive.
Each persistence unit is defined by a persistence-unit element in the persistence.xml file. All the
information for that persistence unit is enclosed within that element. The following sections describe the
metadata that a persistence unit may define when deploying to a Java EE server.

Persistence Unit Name (436)
Every persistence unit must have a name that uniquely identifies it within the scope of its packaging.

if a persistence unit is defined
within a Java EE module, there must not be any other persistence unit of the same name in that module.
For example, if a persistence unit named “EmployeeService” is defined in an EJB JAR named
emp_ejb.jar, there should not be any other persistence units named “EmployeeService” in emp_ejb.jar.

<persistence-unit name="EmployeeService"/>

It may be all that is
needed if the server defaults the remaining information, but not all servers will do this. Some may
require other persistence unit metadata to be present, such as the data source to be accessed.

Transaction Type (436)
Normally, when running in a managed server environment, the
JTA transaction mechanism is used. It is the default transaction type that a server will assume when
none is specified for a persistence unit and is generally the only one that most applications will ever
need, so in practice the transaction type will not need to be specified very often.

When you want to use resource-local transactions
instead of JTA, the transaction-type attribute of the persistence-unit element is used to explicitly
declare the transaction type of RESOURCE_LOCAL or JTA, as in the following example:

<persistence-unit name="EmployeeService" transaction-type="RESOURCE_LOCAL"/>


Persistence Provider:
The Java Persistence API has a pluggable Service Provider Interface (SPI) that allows any compliant Java
EE server to communicate with any compliant persistence provider implementation. Servers normally
have a default provider, though, that is native to the server, meaning that it is implemented by the same
vendor or is shipped with the server. In most cases, this default provider will be used by the server, and
no special metadata will be necessary to explicitly specify it.

In order to switch to a different provider, the provider-supplied class that implements the
javax.persistence.spi.PersistenceProvider interface must be listed in the provider element.

The only
requirement is that the provider JARs be on the server or application classpath and accessible to the
running application at deployment time.

Eclipse Link Provicer configuration:

<persistence-unit name="EmployeeService">
  <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
</persistence-unit>

Data Source (437):
A fundamental part of the persistence unit metadata is the description of where the provider should
obtain database connections from in order to read and write entity data. The target database is specified
in terms of the name of a JDBC data source that is in the server JNDI space. This data source must be
globally accessible since the provider accesses it when the persistence application is deployed.
The typical case is that JTA transactions are used, so it is in the jta-data-source element that the
name of the JTA data source should be specified. Similarly, if the transaction type of the persistence unit
is resource-local, the non-jta-data-source element should be used.

<persistence-unit name="EmployeeService">
  <jta-data-source>java:app/jdbc/EmployeeDS</jta-data-source>
</persistence-unit>

in Java EE 6 three new namespaces were introduced to allow names to refer to
global, application or module scope. By using the corresponding standard namespace prefixes of java:global,
java:app, or java:module, a resource can be made available to other components in a wider scope than just
the component, and the name would be portable across container implementations.

<persistence-unit name="EmployeeService">
 <jta-data-source>java:app/jdbc/EmployeeDS</jta-data-source> 
  <non-jta-data-source>java:app/jdbc/NonTxEmployeeDS</non-jta-data-source>
</persistence-unit>

-------------------------------------------------------------------------------------------------
Mapping Files

If a mapping file named “orm.xml” exists in a META-INF directory on the classpath, for example beside
the persistence.xml file, it does not need to be explicitly listed. The provider will automatically search
for such a file and use it if one exists. Mapping files that are named differently or are in a different
location must be listed in the mapping-file elements in the persistence.xml file.


<persistence-unit name="EmployeeService">
  <jta-data-source>java:app/jdbc/EmployeeDS</jta-data-source>
  <mapping-file>META-INF/employee_service_queries.xml</mapping-file>
  <mapping-file>META-INF/employee_service_entities.xml</mapping-file>
</persistence-unit>


----------------------------------------------------------------------------------------------------

Managed Classes (439):
Managed classes are all the classes that must be processed and considered in a persistence unit,
including entities, mapped superclasses, and embeddable classes.

The set of entities, mapped superclasses, and embedded objects that will be managed in a particular
persistence unit is determined by the provider when it processes the persistence unit. At deployment
time it may obtain managed classes from any of four sources. A managed class will be included if it is
among the following:

* Local classes: the annotated classes in the deployment unit in which its
persistence.xml file was packaged.
* Classes in mapping files: the classes that have mapping entries in an XML
mapping file.
* Explicitly listed classes: the classes that are listed as class elements in the
persistence.xml file.
* Additional JARs of managed classes: the annotated classes in a named JAR listed
in a jar-file element in the persistence.xml file

Local classes - When a JAR
is deployed with a persistence.xml file in the META-INF directory, that JAR will be searched for all the
classes that are annotated with @Entity, @MappedSuperclass or @Embeddable.

This method is clearly the simplest way to cause a class to be included because all that has to be
done is to put the annotated classes into a JAR and add the persistence.xml file in the META-INF directory
of the JAR. The provider will take care of going through the classes and finding the entities.

Classes in Mapping Files 

Any class that has an entry in a mapping file will also be considered a managed class in the persistence
unit. It need only be named in an entity, mapped-superclass, or embeddable element in one of the
mapping files. The set of all the classes from all the listed mapping files (including the implicitly
processed orm.xml file) will be added to the set of managed classes in the persistence unit.

Nothing
special has to be done apart from ensuring that the classes named in a mapping file are on the classpath
of the unit being deployed. If they are in the deployed component archive, they will likely already be on
the classpath. But if they aren’t, they must be explicitly included in the classpath.

Explicitly Listed Classes

When the persistence unit is small or when there is not a large number of entities, you may want to list
classes explicitly in class elements in the persistence.xml file. This will cause the listed classes to be
added to the persistence unit.


Since a class that is local to the deployment unit will already be included, we don’t need to list it in a
class element. Explicitly listing the classes is really useful in three main cases.
The first is when there are additional classes that are not local to the deployment unit JAR. For
example, there is an embedded object class in a different JAR that you want to use in an entity in your
persistence unit. You would list the fully qualified class in the class element in the persistence.xml file.
You will also need to ensure that the JAR or directory that contains the class is on the classpath of the
deployed component, for example, by adding it to the manifest classpath of the deployment JAR.
In the second case, we want to exclude one or more classes that may be annotated as an entity. Even
though the class may be annotated with @Entity, we don’t want it to be treated as an entity in this
particular deployed context. For example, it may be used as a transfer object and need to be part of the
deployment unit. In this case, we need to make use of a special element called exclude-unlistedclasses
in the persistence.xml file, which disables local classes from being added to the persistence
unit. When exclude-unlisted-classes is used, none of the classes in the local classes category described
earlier will be included.

The third case is when we expect to be running the application in a Java SE environment and when
we list the classes explicitly because that is the only portable way to do so in Java SE.

Additional JARs of managed classes (p. 441)

The last way to get managed classes included in the persistence unit is to add them to another JAR and
specify the name of the JAR in a jar-file element in the persistence.xml.

The jar-file element is used
to indicate to the provider a JAR that may contain annotated classes. The provider will then treat the
named JAR as if it were a deployment JAR, and it will look for any annotated classes and add them to the
persistence unit. It will even search for an orm.xml file in the META-INF directory in the JAR and process it
just as if it were an additionally listed mapping file.

When listing a JAR in a jar-file element, it must be listed relative to the parent of the JAR file in
which the META-INF/persistence.xml file is located.

emp.ear
  emp-ejb.jar
    META-INF/persistence.xml
  lib/emp-classes.jar
    examples/model/Employee.class

<persistence-unit name="EmployeeService">
  <jta-data-source>java:app/jdbc/EmployeeDS</jta-data-source>
  <jar-file>lib/emp-classes.jar</jar-file>
</persistence-unit>



Shared Cache Mode
----------------------------------------------------------
The shared-cache-mode element is optional, but when specified it may be set to one of the five
options:

UNSPECIFIED The provider chooses whatever option is most appropriate for that provider.
ALL Cache all the entities in the persistence unit.
NONE Do not cache any of the entities in the persistence unit.
DISABLE_SELECTED Cache all entities except those annotated with @Cacheable(false).
ENABLE_SELECTED Cache no entities except those annotated with @Cacheable(true).

Validation Mode
The validation-mode element in the persistence.xml file determines whether validation is enabled or not.

It may be set to AUTO, meaning that in the
container environment validation is enabled, but when not running in the container, validation will be
enabled only if there is a validation provider available. Setting it to CALLBACK will enable validation and
assume that a validation provider is on the classpath.

The default is AUTO, which enables validation, so if you do not intend to use validation we
recommend that you explicitly disable it by setting the validation-mode element to NONE. This will bypass
the validation provider checks and prevent you from incurring any validation overhead if at some point
later on a provider happens to show up on the classpath.

Adding Vendor Properties
The properties element gives a deployer the chance to supply standard and 
provider-specific settings for the persistence unit. To
guarantee runtime compatibility, a provider must ignore properties it does not understand

<persistence-unit name="EmployeeService">
  ...
  <properties>
    <property name="eclipselink.logging.level" value="FINE"/>
    <property name="eclipselink.cache.size.default" value="500"/>
  </properties>
</persistence-unit>



------------------------------------------------------------------------------------------------
Building and Deploying (443)

application.xml:

<application ... >
  ...
  <library-directory>myDir/jars</library-directory>
</application>

When you are deploying a WAR and want to put an additional JAR of entities on the classpath, you
can put the JAR in the WEB-INF/lib directory of the WAR. This causes the JAR to be on the classpath, and
the classes in it are accessible to all the classes in the WAR.

-----------------------------------------------------------------------------------------------
Packaging options: EJB Modules, web modules, and persistence archives.

EJB Jar:
Session beans have traditionally been deployed in an EJB JAR, although in Java EE 6 they
may also be deployed in a WAR with web components.

As of EJB 3.0, you no longer need to have an ejb-jar.xml deployment descriptor, but if you choose
to use one, it must be in the META-INF directory. When defining a persistence unit in an EJB JAR, the
persistence.xml file is not optional. It must be created and placed in the META-INF directory of the JAR
alongside the ejb-jar.xml deployment descriptor, if it exists. Although the existence of persistence.xml
is required, the contents may be very sparse indeed; in some cases including only the name of the
persistence unit.

The simplest approach is to
simply dump our managed classes into the EJB JAR along with the EJB components.
As long as the managed classes are correctly annotated, 
they will be automatically discovered by the provider at deployment time and added to the persistence unit.


If we wanted to separate the entities from the EJB components, we could put them in a different JAR
and reference that JAR in a jar-file entry in the persistence.xml file.

<persistence-unit>
  <jar-file>lib/emp-classes.jar</jar-file>
</persistence-unit>

Web Archive (446)
-------------------------------------------------------------------------------------------------------
use session beans as the objects referenced by the web
tier, however, and the easiest way to facilitate this is to deploy the web components, EJBs, and
persistence unit all in a WAR file. This not only simplifies the organization of the deployment structure
but also provides a more practical scope for the application. By using the WAR as the deployment
vehicle for all three code tiers, the EJB JAR and EAR units become unnecessary, and the WAR becomes
the new EAR equivalent

In a WAR, the persistence unit root depends upon where the persistence unit is located
within the WAR. The obvious choice is to use the WEB-INF/classes directory as the root, which would
lead us to place the persistence.xml file in the WEB-INF/classes/META-INF directory. Any annotated
managed classes rooted in the WEB-INF/classes directory will be detected and added to the persistence
unit. Similarly, if an orm.xml file is located in WEB-INF/classes/META-INF, it will be processed. The web
components and EJBs are also placed in the classes directory.

emp.war
WEB-INF/web.xml
WEB-INF/classes/META-INF/persistence.xml
WEB-INF/classes/META-INF/orm.xml
WEB-INF/classes/examples/web/EmployeeServlet.class
WEB-INF/classes/examples/ejb/EmployeeService.class
WEB-INF/classes/examples/ejb/EmployeeServiceBean.class
WEB-INF/classes/examples/model/Employee.class
WEB-INF/classes/examples/model/Phone.class
WEB-INF/classes/examples/model/Address.class
WEB-INF/classes/examples/model/Department.class
WEB-INF/classes/examples/model/Project.class

If
we need to add another mapping file then we can put it anywhere on the deployment unit classpath. We
just need to add a mapping-file element to the persistence.xml file. If, for example, we put empmapping.
xml in the WEB-INF/classes/mapping directory, we would add the following element to the
persistence.xml file:

<mapping-file>mapping/emp-mapping.xml</mapping-file>

Since the WEB-INF/classes directory is automatically on the classpath of the WAR, the mapping file
is specified relative to that directory.

Persistence Archive
-------------------------------------------------------------
If we want to allow a persistence unit to be shared or accessible by multiple components, either in
different Java EE modules or in a single WAR, we should use a persistence archive. It also promotes good
design principles by keeping the persistence classes together.

By placing a persistence
archive in the lib directory of an EAR, or in the WEB-INF/lib directory of a WAR, we can make it available
to any enclosed component that needs to operate on the entities defined by its contained persistence
unit.

The persistence archive is simple to create and easy to deploy. It is simply a JAR that contains a
persistence.xml in its META-INF directory and the managed classes for the persistence unit defined by
the persistence.xml file.

The external JAR would be referenced by the
persistence.xml file as a jar-file entry with the same rules for specification as were described in the
other cases.

This is neither recommended nor useful, though, since the persistence archive itself is
already separated from the other component classes. Seldom will there be a reason to create yet
another JAR to store the managed classes, but there may be a case when the other JAR is pre-existing,

Persistence archives are actually a very tidy way of packaging a persistence unit. By keeping them
self-contained (if they do not reference external JARs of classes using jar-file entries), they do not
depend on any other components of the application but can sit as a layer underneath those components
to be used by them.

Persistence Unit Scope (448)
---------------------------------------------------------
Any number of persistence units may be defined in the same persistence.xml file and used in the scope within which
they were defined.

local classes in the same archive will be processed by default. If
multiple persistence units are defined in the same persistence.xml file, and exclude-unlisted-classes
is not used on either one, the same classes will be added to all the defined persistence units.

Rules:
The first rule is that persistence units are accessible only within the scope of their definition.

In fact, in general a persistence unit defined from an EJB JAR is seen by EJB components defined by that EJB JAR, and a
persistence unit defined in a WAR will be seen only by the components defined within that WAR.
Persistence units defined in a persistence archive that lives in the EAR will be seen by all the components
in the application.

The next part is that the names of persistence units must be unique within their scope. For example,
there may be only one persistence unit of a given name within the same EJB JAR. Likewise there may be
only one persistence unit of a given name in the same WAR, as well as only one persistence unit of the
same name in all the persistence archives at the EAR level. There may be a named persistence unit name
in one EJB JAR and another that shares its name in another EJB JAR, or there may even be a persistence
unit with the same name in an EJB JAR as there is in a persistence archive. It just means that whenever a
persistence unit is referenced either within a @PersistenceContext, a @PersistenceUnit annotation, or a
createEntityManagerFactory() method, the most locally scoped one will get used.


Just because it’s possible to have multiple
persistence units with the same name in different component archive namespaces doesn’t mean that it
is a good idea. As a general rule, you should always give persistence units unique names within the
application.

-------------------------------------------------------------------------------
Outside the server

Deploying in Java SE environment.

Transaction type: 
When running in a server environment, the transaction-type attribute in the persistence unit defaults
to being JTA. The JTA transaction layer was designed for use within the Java EE server and is intended to
be fully integrated and coupled to the server components. Given this fact, JPA does not provide support
for using JTA outside the server. Some providers may offer this support, but it cannot be portably relied
upon, and of course it relies upon the JTA component being present.
The transaction type does not normally need to be specified when deploying to Java SE. It will just
default to being RESOURCE_LOCAL, but may be specified explicitly to make the programming contract more
clear.

Data Source
When configuring for outside the server, not only can we not rely upon JTA, as we described in the
transaction type section, but we cannot rely upon JNDI at all. We therefore cannot portably rely upon
either of the data source elements in Java SE configurations.

When using resource-local transactions outside the server, the provider obtains database
connections directly vended out by the JDBC driver. In order for it to get these connections, it must
obtain the driver-specific information, which typically includes the name of the driver class, the URL
that the driver uses to connect to the database, and the user and password authentication that the driver
also passes to the database. This metadata may be specified in whichever way the provider prefers it to
be specified, but all vendors must support the standard JDBC properties in the properties section.

<persistence-unit name="EmployeeService">
...
<properties>
<property name="javax.persistence.jdbc.driver"
value="org.apache.derby.jdbc.ClientDriver"/>
<property name="javax.persistence.jdbc.url"
value="jdbc:derby://localhost:1527/EmpServDB;create=true"/>
<property name="javax.persistence.jdbc.user"
value="APP"/>
<property name="javax.persistence.jdbc.password"
value="APP"/>
</properties>
</persistence-unit>

---------------------------------------------------------------------
Providers

Many servers will have a default or native provider that they will use when the provider is not specified.
It will automatically call into that provider to create an EntityManagerFactory at
deployment time.

When not in a server, the factory is created programmatically using the Persistence class. When the
createEntityManagerFactory() method is invoked, the Persistence class will begin a built-in
pluggability protocol that goes out and finds the provider that is specified in the persistence unit
configuration. If none was specified, the first one that it finds will be used. Providers export themselves
through a service that exists in the provider JAR that must be on the classpath. The net result is that the
provider element is not required.

In the majority of cases when only one provider will be on the classpath, the provider will be
detected and used by the Persistence class to create an EntityManagerFactory for a given persistence
unit. If you are ever in a situation in which you have two providers on the classpath and you want a
particular one to be used, you should specify the provider class in the provider element. To prevent
runtime and deployment errors, the provider element should be used if the application has a code
dependency on a specific provider.

--------------------------------------------------------------------------
Listing the Entities

The problem with this kind of detection outside the server is that the Java SE environment permits
all kinds of different class resources to be added to the classpath, including network URLs or any other
kind of resource that is acceptable to a classloader. There are no official deployment unit boundaries
that the provider is aware of. This makes it difficult for JPA to require providers to support doing
automatic detection of the managed classes inside a persistence archive.

The official position of the API
is that for an application to be portable across all vendors it must explicitly list all the managed classes in
the persistence unit using class elements.


Any of the major providers actually do support
detecting the classes outside the server. This is really kind of an essential usability issue since the
maintenance of a class list would be so cumbersome as to be a productivity bottleneck unless you had a
tool manage the list for you.

A corollary to the official portability guideline to use class elements to enumerate the list of
managed classes is that the exclude-unlisted-classes element is not guaranteed to have any impact in
Java SE persistence units. Some providers may allow this element to be used outside the server, but it is
not really very useful in the SE environment anyway given the flexibility of the classpath and packaging
allowances in that environment.

-----------------------------------------------------------------------
Specifying properties at runtime:

One of the benefits of running outside the server is the ability to specify provider properties at runtime.

This is available because of the overloaded createEntityManagerFactory() method that accepts a Map of
properties in addition to the name of the persistence unit.

The properties passed to this method are
combined with those already specified, normally in the persistence.xml file. They may be additional
properties or they may override the value of a property that was already specified. This may not seem
very useful to some applications, since putting runtime configuration information in code is not
normally viewed as being better than isolating it in an XML file. However, one can imagine this being a
convenient way to set properties obtained from a program input, such as the command line, as an even
more dynamic configuration mechanism.

public class EmployeeService {
  public static void main(String[] args) {
    Map props = new HashMap();
    props.put("javax.persistence.jdbc.user", args[0]);
    props.put("javax.persistence.jdbc.password", args[1]);

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("EmployeeService", props);
    // ...
    emf.close();
}
}

------------------------------------------------
System Classpath:

In some ways, configuring a persistence unit in a Java SE application is actually easier than configuring
in the server because the classpath is simply the system classpath. Adding classes or jars on the system
classpath is a trivial exercise.

---------------------------------------------------
Schema Generation
Most JPA vendors support some kind of schema generation either in the runtime or in a tool.

One of the complaints around schema generation is that you can’t specify everything that you need
to be able to finely tune the schema. This was done on purpose. There are too many differences between
databases and too many different settings to try to put in options for every database type. If every
database-tuning option were exposed through JPA then we would end up duplicating the features of
Data Definition Language (DDL) in an API that was not meant to be a database schema generation
facility. As we mentioned earlier, the majority of applications find themselves in a meet-in-the-middle
mapping scenario in any case, and when they do have control over the schema, the final schema will
typically be tuned by a database administrator or someone with the appropriate level of database
experience.

Unique Constraints:
A unique constraint can be created on a generated column or join column by using the unique element
in the @Column or @JoinColumn annotations.

@Id private int id;
@Column(unique=true)
private String name;

Note that the unique element is unnecessary on the identifier column because a primary key
constraint will always be generated for the primary key.

A second way of adding a unique constraint is to embed one or more @UniqueConstraint
annotations in a uniqueConstraints element in the @Table or @SecondaryTable annotations. Any number
of unique constraints may be added to the table definition, including compound constraints. The value
passed to the @UniqueConstraint annotation is an array of one or more strings listing the column names
that make up the constraint.

@Entity
@Table(name="EMP",
    uniqueConstraints=@UniqueConstraint(columnNames={"NAME"}))
public class Employee {
  @Id private int id;
  private String name;
  // ...
}


Null Constraints:
A null constraint just indicates that
the column may or may not be null. It is defined when the column is declared as part of the table.

@Column(nullable=false)
private String name;
@ManyToOne
@JoinColumn(nullable=false)
private Address address;

String-based Columns:
When no length is specified for a column that is being generated to store string values, the length will be
defaulted to 255.

When a column is generated for a basic mapping of a field or property of type String,
char[], or Character[], its length should be explicitly listed in the length element of the @Column
annotation if 255 is not the desired maximum length.

@Column(length=40)
private String name;

There is no similar length element in the @JoinColumn
annotation. When primary keys are string-based, the provider may set the join column length to the
same length as the primary key column in the table that is being joined to. This is not required to be
supported, however.
It is not defined for length to be used for large objects; some databases do not require or even allow
the length of lobs to be specified.

Floating Point Columns
Columns containing floating point types have a precision and scale associated with them. The precision
is just the number of digits that are used to represent the value, and the scale is the number of digits after
the decimal point.

These two values may be specified as precision and scale elements in the @Column
annotation when mapping a floating point type. Like other schema generation elements, they have no
effect on the entity at runtime.

@Column(precision=8, scale=2)
private float hourlyRate;

----------------------------------------------------------------
Defining the column

There may be a time when you are happy with all the generated columns except for one. The type of the
column isn’t what you want it to be, and you don’t want to go through the trouble of manually
generating the schema for the sake of one column. This is one instance when the columnDefinition
element comes in handy. By hand-rolling the DDL for the column, we can include it as the column
definition and let the provider use it to define the column.

The columnDefinition element is available in all the column-oriented annotation types, including
@Column, @JoinColumn, @PrimaryKeyJoinColumn, @MapKeyColumn, @MapKeyJoinColumn, @OrderColumn, and
@DiscriminatorColumn. Whenever a column is to be generated, the columnDefinition element may be
used to indicate the DDL string that should be used to generate the type (not including the trailing
comma).It also allows a database-specific type or format to be used that may supersede the generated
type offered by the provider for the database being used.

@Id
@Column(columnDefinition="NVARCHAR2(40)")
private String name;
@Column(name="START_DATE",
columnDefinition="DATE DEFAULT SYSDATE")
private java.sql.Date startDate;

Specifying the column definition is quite a powerful schema generation practice that allows
overriding of the generated column to an application-defined custom column definition. But the power
is accompanied by some risk as well. When a column definition is included, other accompanying
column-specific generation metadata is ignored. Specifying the precision, scale, or length in the same
annotation as a column definition would be both unnecessary and confusing.
Not only does using columnDefinition in your code bind you to a particular schema but it also binds
you to a particular database since the DDL tends to be database-specific. This is just a flexibilityportability
trade-off, and you have to decide whether it is appropriate for your application.

