Criteria API (p. 267 of 538)

CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Employee> c = cb.createQuery(Employee.class);
Root<Employee> emp = c.from(Employee.class);
c.select(emp)
.where(cb.equal(emp.get("name"), "John Smith"));

p. 269
----------------------------------------------------------------------------------
Building Criteria API queries (272).
Creating a Query Definition:

EntityManager.getCriteriaBuilder()

3 methods for creating a query definition:

	CriteriaBuilder
		.createQuery(Class<T>)  <--The result is typed
		.createQuery()  <-- The result is object
		.createTupleQuery() <-- Returns Tuple, an object containing an assortment of objects and applies typing to 
					aggregate parts. It can be used whenever multiple items are returned and you want to combine 
					them into a single typed object.

JP QL Clause --> Criteria API --> Interface Method

SELECT -->  CriteriaQuery -->  select()
	    Subquery --> select()
FROM --> AbstractQuery --> from()
WHERE --> AbstractQuery --> where()
ORDER BY --> CriteriaQuery  --> orderBy()
GROUP BY --> AbstractQuery --> groupBy()
HAVING --> AbstractQuery --> having()
		
---------------------------------------------------------------------------------
Criteria Objects and Mutability (p. 274)
The majority of objects created through the criteria API are in fact immutable.

Only the CriteriaBuilder methods that create query definition objects produce truly mutable
results. The CriteriaQuery and Subquery objects are intended to be modified many times by invoking
methods such as select(), from(), and where(). But even here care must be taken as invoking methods
twice can have one of two different effects. In most cases, invoking a method twice replaces the contents
within the object with the argument being supplied. For example, invoking select() twice with two
different arguments results in only the argument from the second invocation actually remaining as part
of the query definition.
In some cases, however, invoking a method twice is in fact addition. Invoking from() twice with
different arguments results in multiple query roots being added to the query definition.