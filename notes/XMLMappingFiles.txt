XML Mapping Files (399)
------------------------------------------------------------------------
simplified logic for obtaining the metadata for the persistence unit:
1. Process the annotations. The set of entities, mapped superclasses, and
embedded objects (we’ll call this set E) is discovered by looking for the @Entity,
@MappedSuperclass, and @Embeddable annotations. The class and method
annotations in all the classes in set E are processed, and the resulting metadata
is stored in set C. Any missing metadata that was not explicitly specified in the
annotations is left empty.

2. Add the classes defined in XML. Look for all the entities, mapped superclasses,
and embedded objects that are defined in the mapping files and add them to E.
If we find that one of the classes already exists in E, we apply the overriding
rules for class-level metadata that we found in the mapping file. Add or adjust
the class-level metadata in C according to the overriding rules.

3. Add the attribute mappings defined in XML. For each class in E, look at the
fields or properties in the mapping file and try to add the method metadata to
C. If the field or property already exists there, apply the overriding rules for
attribute-level mapping metadata.

4. Apply defaults. Determine all default values according to the scoping rules and
where defaults might have been defined (see the following for description of
default rules). The classes, attribute mappings, and other settings that have not
yet been filled in are assigned values and put in C.

------------------------------------------------------------------------------
Mapping File.

each mapping file that is supplied must conform and be
valid against the orm_2_0.xsd schema located at http://java.sun.com/xml/ns/persistence/orm_2_0.xsd.

Typical XML header for a mapping file:

<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm
  http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
   version="2.0">


The root element of the mapping file is called entity-mappings

The subelements of entity-mappings can be categorized into four main
scoping and functional groups: 
1. persistence unit defaults, 
2. mapping files defaults, 
3. queries and generators,
4. managed classes and mappings
-----------------------------------------------------------------------------------
Disabling Annotations 401.

For those who are perfectly happy with XML and don’t feel the need for annotations, there are ways to
skip the annotation processing phase:

xml-mapping-metadatacomplete
element and metadata-complete attribute provide a convenient way to reduce the overhead
that is required to discover and process all the annotations on the classes in the persistence unit.

It is
also a way to effectively disable any annotations that do exist. These options will cause the processor to
completely ignore them as if they did not exist at all.

The xml-mapping-metadata-complete element needs to be in only one of the mapping files if there
are multiple mapping files in the persistence unit.

It is specified as an empty subelement of the
persistence-unit-metadata element, which is the first subelement of entity-mappings.

<entity-mappings>
 <persistence-unit-metadata>
  <xml-mapping-metadata-complete/>
 </persistence-unit-metadata>
 ...
</entity-mappings>


If enabled, there is no way to portably override this setting. It will apply globally to the persistence unit,
regardless of whether any metadata-complete attribute is set to false in an entity.

Persistence Unit Defaults
<persistence-unit-defaults>
	schema, 
	catalog, 
	delimited-identifiers, 
	access, 
	cascade-persist, 
	and entitylisteners



------------------------------------------------------------------
Queries and Generators (409):

Sequence generator:
<entity-mappings>
...
	<sequence-generator name="empGen" sequence-name="empSeq"/>
...
</entity-mappings>

Table generator:
<entity-mappings>
...
	<table-generator name="empGen" table="ID_GEN" pk-column-value="EmpId"/>
...
</entity-mappings>

named query:
A named-query element can appear as a subelement of entity-mappings or as a subelement of
entity. Regardless of where it is defined, it will be keyed by its name in the persistence unit query
namespace.

<entity-mappings>
...
<named-query name="findEmpsWithName">
	<query>SELECT e FROM Employee e WHERE e.name LIKE :empName</query>
	<hint name="javax.persistence.cacheRetrieveMode"
		value="CacheRetrieveMode.BYPASS"/>
</named-query>
<named-query name="findEmpsWithHigherSalary">
	<query><![CDATA[SELECT e FROM Employee e WHERE e.salary > :salary]]></query>
</named-query>
...
</entity-mappings>

named-native-query   (411)
-------------------------
Native SQL can also be used for named queries by defining a @NamedNativeQuery annotation (refer to
Chapter 11) or by specifying a named-native-query element in a mapping file

Both named queries and
native queries share the same query namespace in the persistence unit, so using either the named-query
or named-native-query element will cause that query to override any query of the same name defined in
annotation form.

native-named-query element can appear as
a subelement of entity-mappings or as a subelement of entity

The only difference is that two additional attributes have been added to named-native-query to supply
the result class or the result set mapping

One use case for overriding queries is when the DBA comes to you and demands that your query run
a certain way on a certain database. You can leave the query as generic JP QL for the other databases, but
it turns out that, for example, the Oracle database can do this one particular thing very well using native
syntax. By putting this query in a DB-specific XML file, it will be much easier to manage in the future.

@NamedQuery(name="findAllManagers"
query="SELECT e FROM Employee e WHERE e.directs IS NOT EMPTY")
@Entity
public class Employee { ... }


<entity-mappings>
...
<named-native-query name="findAllManagers"
result-class="examples.model.Employee">
<query>
SELECT /*+ FULL(m) */ e.id, e.name, e.salary,
e.manager_id, e.dept_id, e.address_id
FROM emp e,
(SELECT DISTINCT manager_id AS id FROM emp) m
WHERE e.id = m.id
</query>
</named-native-query>
...
</entity-mappings>

sql-result-set-mapping
-------------------------------------------
A result set mapping is used by native queries to instruct the persistence provider how to map the
results. The sql-result-set-mapping element corresponds to the @SqlResultSetMapping annotation

Just
as @SqlResultSetMapping encloses arrays of @EntityResult or @ColumnResult, or both, so also can the sqlresult-
set-mapping element contain multiple entity-result and column-result elements. And
similarly, because each @EntityResult contains an array of @FieldResult, the entity-result element can
contain multiple field-result elements. The other entityClass and discriminatorColumn elements of
the @EntityResult annotation map directly to the entity-class and discriminator-column attributes of
the entity-result element.

Each sql-result-set-mapping can define a new mapping or override an existing one of the same
name that was defined by an annotation. It is not possible to override only a part of the result set
mapping. If you’re overriding an annotation, the entire annotation will be overridden, and the
components of the result set mapping defined by the sql-result-set-mapping element will apply.

@SqlResultSetMapping(
  name="DepartmentSummary",
  entities={
    @EntityResult(entityClass=Department.class,
      fields=@FieldResult(name="name", column="DEPT_NAME")),
    @EntityResult(entityClass=Employee.class)
  },
  columns={@ColumnResult(name="TOT_EMP"),
           @ColumnResult(name="AVG_SAL")}
)
<entity-mappings>
...
 <sql-result-set-mapping name="DepartmentSummary">
  <entity-result entity-class="examples.model.Department">
    <field-result name="name" column="DEPT_NAME"/>
  </entity-result>
  <entity-result entity-class="examples.model.Employee"/>
  <column-result name="TOT_EMP"/>
  <column-result name="AVG_SAL"/>
</sql-result-set-mapping>
...
</entity-mappings>

--------------------------------------------------------------------------------
Managed Classes and Mappings (413):
The main portion of every mapping file will typically be the managed classes in the persistence unit that
are the entity, mapped-superclass, and embeddable elements and their state and relationship mappings.

Each of them has its class specified as a class attribute of the element and its access type specified in an
access attribute. The access attribute is required only when there are no annotations on the managed
class or when metadata-complete (or xml-mapping-metadata-complete) has been specified for the class. If
neither of these conditions apply and annotations do exist on the class, the access attribute setting
should match the access used by the annotations.


For entities, an optional cacheable attribute can also be set to a boolean value. This attribute
corresponds to the @Cacheable annotation and when specified will override the value of the annotation.
Like the annotation, it dictates whether the shared cache is used for instances of the entity class, and is
applicable only when the shared-cache-mode (see Chapter 13) is set to one of the selective modes. The
cacheable attribute is inherited by subclasses and is overridden by either the @Cacheable annotation on
the subclass, or the cacheable attribute in the subclass element.
Queries and generators can be specified within an entity element. Generators can also be defined
inside an id element in an entity or mapped superclass.

Attributes
----------------
The attributes element is a subelement of the entity, mapped-superclass, and embeddable
elements. It is an enclosing element that groups all the mapping subelements for the fields or properties
of the managed class. Because it is only a grouping element, it does not have an analogous annotation. It
dictates which mappings are allowed for each type of managed class.

Each
attribute has a name attribute (in the XML attribute sense) that is required to indicate the name of the attribute
(in this case, we mean field or property) that it is mapping

A general comment about overriding attribute mappings is that overriding annotations with XML is
done at the level of the attribute (field or property) name. Our algorithm will apply to these mappings as
they are keyed by attribute name, and XML overrides will be applied by attribute name alone. All the
annotated mapping information for the attribute will be overridden as soon as a mapping element for
that attribute name is defined in XML.

There is nothing to stop the type of attribute mapping defined in annotation form from being
overridden in XML to be a different mapping type. The provider is responsible only for implementing
the overriding rules and likely won’t prevent this kind of behavior. This leads us to our second comment
about overriding, which is that when overriding annotations, we should use the correct and compatible
XML mapping. There are some cases where it might be valid to actually map an attribute differently in
XML, but these cases are few and far between and primarily for exceptional types of testing or
debugging.

-----------------------------------------------------------------------------------------------------------------
Tables
There are two elements for specifying table information for a
managed class: table and secondary-table.

table
A table element can occur as a subelement of entity and describes the table that the entity is mapped
to. It corresponds to the @Table annotation (refer to Chapter 4) and has name, catalog, and schema
attributes.

One or more unique-constraint subelements might be included if unique column constraints
are to be created in the table during schema generation.

If a @Table annotation exists on the entity, the table element will override the table defined by the
annotation.

@Entity
@Table(name="EMP", schema="HR")
public class Employee { ... }

<entity class="examples.model.Employee">
  <table name="EMP_REC" schema="HR"/>
  ...
</entity>

secondary-table

Any number of secondary tables can be added to the entity by adding one or more secondary-table
subelements to the entity element. This element corresponds to the @SecondaryTable annotation.

The name attribute is required, just as the name is required
in the annotation. The schema and catalog attributes and the unique-constraint subelements can be
included, just as with the table element.

Every secondary table needs to be joined to the primary table through a primary key join column

The primary-key-join-column element is a subelement of the secondary-table
element and corresponds to the @PrimaryKeyJoinColumn annotation. As with the annotation, this is
required only if the primary key column of the secondary table is different from that of the primary table.
If the primary key happens to be a compound primary key, multiple primary-key-join-column elements
can be specified.

@Entity
@Table(name="EMP")
@SecondaryTables({
@SecondaryTable(name="EMP_INFO"),
@SecondaryTable(name="EMP_HIST",
pkJoinColumns=@PrimaryKeyJoinColumn(name="EMP_ID"))
})
public class Employee {
@Id private int id;
// ...
}

<entity class="examples.model.Employee">
  <table name="EMP"/>
  <secondary-table name="EMP_INFO"/>
  <secondary-table name="EMP_HIST">
    <primary-key-join-column name="EMP_ID"/>
  </secondary-table>
...
</entity>

------------------------------------------------------------------------------------------
Identifier Mappings:

id
The id element is the most common method used to indicate the identifier for an entity. It corresponds
to the @Id annotation but also encapsulates metadata that is relevant to identifiers. This includes a
number of subelements, the first of which is the column subelement. It corresponds to the @Column
annotation that might accompany an @Id annotation on the field or property. When not specified, the
default column name will be assumed even if a @Column annotation exists on the field or property. As we
discussed in the “Attributes” section, this is because the XML mapping of the attribute overrides the
entire group of mapping metadata on the field or property.

A generated-value element corresponding to the @GeneratedValue annotation can also be included
in the id element. It is used to indicate that the identifier will have its value automatically generated by
the provider

This generated-value element has strategy and generator attributes
that match those on the annotation. The named generator can be defined anywhere in the persistence unit. 
Sequence and table generators can also be defined within the id element.

Overriding an Id Generator
@Entity
public class Employee {
  @Id @GeneratedValue(strategy=GenerationType.TABLE, generator="empTab")
  @TableGenerator(name="empTab", table="ID_GEN")
  private long id;
  // ...
}
<entity class="examples.model.Employee">
...
  <attributes>
    <id name="id">
      <generated-value strategy="SEQUENCE" generator="empSeq"/>
      <sequence-generator name="empSeq" sequence-name="mySeq"/>
    </id>
...
  </attributes>
</entity>

embedded-id
An embedded-id element is used when a compound primary key class is used as the identifier (refer to
Chapter 10). It corresponds to the @EmbeddedId annotation and is really just mapping an embedded class
as the identifier. All the state is actually mapped within the embedded object, so there are only attribute
overrides available within the embedded-id element

The zero or more attribute-override elements in the property or field mapping of the entity provide the
local overrides that apply to the entity table

@Entity
public class Employee {
  @EmbeddedId private EmployeePK id;
  // ...
}
<entity class="examples.model.Employee">
...
  <attributes>
    <embedded-id name="id"/>
...
  </attributes>
</entity>


id-class
-----------------------
An id class is one strategy that can be used for a compound primary key

The idclass
subelement of an entity or mapped-superclass element corresponds to the @IdClass annotation,
and when it is specified in XML, it will override any @IdClass annotation on the class. Overriding the id
class should not normally be done in practice because code that uses the entities will typically assume a
particular identifier class.
The name of the class is indicated as the value of the class attribute of the id-class element:

@Entity
@IdClass(EmployeePK.class)
public class Employee { ... }

<entity class="examples.model.Employee">
...
  <id-class="examples.model.EmployeePK"/>
...
</entity>

-----------------------------------------------------------------------------------------
Simple Mappings

A simple mapping takes an attribute and maps it to a single column in a table. The majority of persistent
state mapped by an entity will be composed of simple mappings.

basic
Basic mappings map a simple state field or
property to a column in the table. The basic element provides this same ability in XML and corresponds
to the @Basic annotation.

Just as with annotations, when a field or property is not mapped, it will be assumed to be a basic mapping and will
be defaulted as such.

In addition to a name, the basic element has fetch and optional attributes that can be used for lazy
loading and optionality. They are not required and not very useful at the level of a field or property. The
only other attribute of the basic element is the access attribute. When specified, it will cause the state to
be accessed using the prescribed mode.

The most important and useful subelement of basic is the column element. Three other subelements
can optionally be included inside the basic element. They are used to indicate the type to use when
communicating with the JDBC driver to the database column. The first is an empty lob element that
corresponds to the @Lob annotation. This is used when the target column is a large object type. Whether
it is a character or binary object depends upon the type of the field or property.
Next is the temporal element that contains one of DATE, TIME, or TIMESTAMP as its content. It
corresponds to the @Temporal annotation and is used for fields of type java.util.Date or
java.util.Calendar.

Finally, if the field or property is an enumerated type, and the enumerated values are to be mapped
using strings instead of ordinals, the enumerated element should be used. It corresponds to the
@Enumerated annotation, and contains either ORDINAL or STRING as its content.

<entity class="examples.model.Employee">
...
<attributes>
...
  <basic name="name"/>
  <basic name="comments">
    <column name="COMM"/>
    <lob/>
  </basic>
  <basic name="type">
    <column name="STR_TYPE"/>
    <enumerated>STRING</enumerated>
  </basic>
...
</attributes>
</entity>

transient
A transient element marks a field or property as being non-persistent. It is equivalent to the @Transient
annotation or having a transient qualifier on the field or property.

<entity-mappings>
  <entity class="examples.model.Employee">
    <attributes>
      <transient name="cacheAge"/>
	...
    </attributes>
  </entity>
</entity-mappings>

version
The version element is used to map the version number field in the entity. It corresponds to the
@Version annotation and is normally mapped to an integral field for the provider to increment when it
makes persistent changes to the entity

The column subelement specifies the
column that stores the version data. Only one version field should exist for each entity.


<entity-mappings>
  <entity class="examples.model.Employee">
    <attributes>
...
      <version name="version"/>
...
    </attributes>
</entity>
...
</entity-mappings>


Relationship and collection mappings (420)
------------------------------------------------------
Like their annotation counterparts, the XML relationship and collection elements are used to map the
associations and element collections.

many-to-one
This element corresponds to the @ManyToOne annotation and, like the basic mapping, has fetch, optional and
access attributes.

Normally the target entity is known by the provider because the field or property is almost always of
the target entity type, but if not then the target-entity attribute should also be specified.

When the
many-to-one foreign key contributes to the identifier of the entity and the @MapsId annotation described
in Chapter 10 applies then the maps-id attribute would be used. The value, when required, is the name of
the embeddable attribute of the embedded id class that maps the foreign key relationship. If, on the
other hand, the relationship is part of the identifier but a simple @Id would be applied to the relationship
field or property, the boolean id attribute of the many-to-one element should be specified and set to true.

Unique to relationships is the ability to cascade operations across them. The cascade settings for a
relationship dictate which operations are cascaded to the target entity of the many-to-one mapping. To
specify how cascading should occur, a cascade element should be included as a subelement of the manyto-
one element. Within the cascade element, we can include our choice of empty cascade-all, cascadepersist,
cascade-merge, cascade-remove, cascade-refresh, or cascade-detach subelements that dictate
that the given operations be cascaded. Of course, specifying cascade elements in addition to the
cascade-all element is simply redundant.

When it comes to relationships, there are times
where you will want to test the performance of a given operation and would like to be able to set certain
relationships to load eagerly or lazily. You will not want to go through the code and have to keep
changing these settings back and forth, however. It would be more practical to have the mappings that
you are tuning in XML and just change them when required.

<entity class="examples.model.Employee">
...
  <attributes>
...
    <many-to-one name="address" fetch="LAZY"/>
    <many-to-one name="manager" fetch="LAZY">
     <join-column name="MGR"/>
    </many-to-one>
...
  </attributes>
</entity>


one-to-many
A one-to-many mapping is a collection-valued association, and the collection can be a List, Map,
Set, or Collection. If it is a List, the elements can be populated in a specific order by specifying an
order-by subelement. This element corresponds to the @OrderBy annotation and will cause the contents
of the list to be ordered by the specific field or property name that is specified in the element content.


Alternatively, a List can have its order persisted using an order-column subelement, which provides all
the functionality of its @OrderColumn annotation counterpart.

If the collection is a Map, there are a number of different options, depending upon the key type. If the
key type is a field or property of the target entity, an optional map-key subelement can be specified to
indicate the name of the field or property to use as the key. This element corresponds to the @MapKey
annotation and will default to the primary key field or property when none is specified. If the key type is
an entity, a map-key-join-column can be used, whereas if the key is a basic type, a map-key-column
subelement indicates the column that stores the key. Furthermore, for basic keys, map-key-enumerated
or map-key-temporal can be used if the basic type is an enumerated or temporal type, respectively. If the
key type is an embeddable type, map-key-attribute-override can be specified to override where an
embedded field or property of the embeddable type is mapped. The map-key-class subelement is
included to indicate the type of the key when the Map is not generically typed, and the key is not a field or
property of the target entity.

<entity class="examples.model.Employee">
...
<attributes>
...
<one-to-many name="directs" mapped-by="manager">
<order-by/>
</one-to-many>
<many-to-one name="manager"/>
...
</attributes>
</entity>

one-to-one
To map a one-to-one association, the one-to-one element must be used. This element corresponds to
the @OneToOne annotation

A one-to-one element might contain a join-column element if it is the owner of the relationship or it
might have multiple join-column elements if the association is to an entity with a compound primary
key. In some legacy systems, it is mapped using a join table, so a join-table element should be used in
this case.

@Entity
public class Employee {
// ...
@OneToOne(mappedBy="employee")
private ParkingSpace parkingSpace;
// ...
}
@Entity
public class ParkingSpace {
@Id
private int id;
// ...
@OneToOne @MapsId
private Employee employee;
// ...
}
orm.xml snippet:
<entity-mappings>
<entity class="examples.model.Employee">
<attributes>
...
<one-to-one name="parkingSpace" mapped-by="employee"/>
...
</attributes>
</entity>
<entity class="examples.model.ParkingSpace">
<attributes>
...
<one-to-one name="employee" maps-id=”true”/>
...
</attributes>
</entity>
</entity-mappings>

many-to-many
Creating a many-to-many association is done through the use of a many-to-many element. This element
corresponds to the @ManyToMany annotation (refer to Chapter 4) and has the same optional targetentity,
fetch, access, and mapped-by attributes that were described in the one-to-many mapping.



element-collection
A collection of basic or embeddable objects is mapped using an element-collection element, which
corresponds to the @ElementCollection annotation (refer to Chapter 5) and has the same optional
target-entity, fetch, and access attributes that were described in the one-to-many and many-to-many
mapping sections

If the collection is a List, one of order-by or order-column can be specified as a subelement. If the
collection is a Map and contains embeddables as values, a map-key element can be used to indicate that a
field or property in the embeddable value is to be used as the map key. Alternatively, the various mapkey-
column, map-key-join-column, map-key-enumerated, map-key-temporal, map-key-attribute-override,
and map-key-class can be used as described in the one-to-many section.

<entity class="examples.model.Employee">
<attributes>
...
<element-collection name="projectHours" target-class=”java.lang.Integer“>
<map-key-class name="java.lang.String"/>
<map-key-column name="PROJ_NAME"/>
<column name="HOURS_WORKED"/>
<collection-table name="PROJ_TIME"/>
</element-collection>
</attributes>
</entity>


Embedded object mappings:

An embedded object is a class that depends on its parent entity for its identity. Embedded objects are
specified in XML using the embedded element and are customized using the attribute-override element.

embedded
An embedded element is used for mapping an embedded object contained within a field or property

It corresponds to the @Embedded annotation, and permits an access attribute to be
specified to dictate whether the state is to be accessed using a field or property. Because the persistent
state is mapped within the embedded object, only the attribute-override and association-override
subelements are allowed within the embedded element.

There must be an embeddable class entry in a mapping file for the embedded object, or it must be
annotated as @Embeddable.

@Entity
public class Employee {
// ...
@Embedded
private Address address;
// ...
}
@Embeddable
public class Address {
private String street;
private String city;
private String state;
private String zip;
// ...
}


<entity-mappings>
  <entity class="examples.model.Employee">
    <attributes>
      ...
      <embedded name="address"/>
      ...
    </attributes>
  </entity>
  <embeddable class="examples.model.Address"/>
</entity-mappings>

attribute-override
When an embedded object is used by multiple entity types, it is likely that some of the basic mappings
in the embedded object will need to be remapped by one or more of the entities

The attribute-override element can be specified as a subelement of the embedded, embedded-id, and
element-collection elements to accommodate this case.

The annotation that corresponds to the attribute-override element is the @AttributeOverride
annotation. This annotation can be on the entity class or on a field or property that stores an embedded
object, collection of embedded objects, or embedded id. When an @AttributeOverride annotation is
present in the entity, it will be overridden only by an attribute-override element in the entity mapping
file entry that specifies the same named field or property. Our earlier algorithm still holds if we think of
the attribute overrides as keyed by the name of the field or property that they are overriding. All the
annotation overrides for an entity are gathered, all the XML overrides for the class are applied on top of
the annotation overrides. If there is an override in XML for the same named field or property, it will
overwrite the annotated one. The remaining non-overlapping overrides from annotations and XML will
also be applied.
The attribute-override element stores the name of the field or property in its name attribute and the
column that the field or property maps to as a column subelement. Listing 12-28 revisits Listing 12-27 and
overrides the state and zip fields of the embedded address.

<embedded name="address">
<attribute-override name="state">
<column name="PROV"/>
</attribute-override>
<attribute-override name="zip">
<column name="PCODE"/>
</attribute-override>
</embedded>




association-override
Embeddable objects also support relationship mappings, although it is a less common requirement.
When a many-to-one or one-to-one relationship is present in an embeddable, a join column is mapped
either explicitly or by default by the association in the embedded object. Reusing the embeddable type
within another entity class means there is a possibility that the join column will need to be remapped.
The association-override element, which corresponds to the @AssociationOverride annotation (refer to
Chapter 10), can be included as a subelement of the embedded, embedded-id and element-collection
elements to accommodate this case

<association-override name="city">
  <join-column name="CITY_ID"/>
</association-override>



Inheritance mappings (429)
An entity inheritance hierarchy is mapped using the inheritance, discriminator-column, and
discriminator-value elements. If the inheritance strategy is changed, it must be overridden for the
entire entity hierarchy.


inheritance
The inheritance element is specified to indicate the root of an inheritance hierarchy. It corresponds to
the @Inheritance annotation and indicates the inheritance-mapping strategy that is to be used. When it
is included in the entity element, it will override any inheritance strategy that is defined or defaulted in
the @Inheritance annotation on the entity class.

Changing the inheritance strategy can cause repercussions that spill out into other areas. For
example, changing a strategy from single table to joined will likely require adding a table to each of the
entities below it.

<entity class="examples.model.Employee">
  <table name="EMP"/>
  <inheritance strategy="JOINED"/>
  ...
</entity>

discriminator-column
Discriminator columns store values that differentiate between concrete entity subclasses in an
inheritance hierarchy

The discriminator-column element is a subelement of the
entity or entity-result elements and is used to define or override the discriminator column. It
corresponds to and overrides the @DiscriminatorColumn annotation and has attributes that include the
name, discriminator-type, columnDefinition, and length. It is an empty element that has no
subelements.

<entity class="examples.model.Employee">
  <inheritance/>
  <discriminator-column name="TYPE"/>
...
</entity >


discriminator-value

A discriminator-value element is used to declare the value that identifies the concrete entity subclass
that is stored in a database row.

The discriminator-value element corresponds to the @DiscriminatorValue annotation and
overrides it when it exists on the entity class. As with the other inheritance overrides, it is seldom used
as an override. Even when a hierarchy is remapped to a different database or set of tables, it will not
normally be necessary to override the value.


<entity class="examples.model.FullTimeEmployee">
  <discriminator-value>FT</discriminator-value>
  ...
</entity>

attribute-override and association-override
Simple mappings and associations can be overridden through the use of attribute overrides and
association overrides, but only in the case of an entity that is the subclass of a mapped superclass.
Simple persistent state or association state that is inherited from an entity superclass cannot portably be
overridden.

<entity class="examples.model.PartTimeEmployee">
...
<attribute-override name="name">
<column name="EMP_NAME"/>
</attribute-override>
<attribute-override name="salary">
<column name="SAL"/>
</attribute-override>
<association-override name="manager">
<join-column name="MGR_NAME" referenced-column-name="EMP_NAME"/>
<join-column name="MGR_DOB" referenced-column-name="DOB"/>
</association-override>
...
</entity>

Lifecycle Events (432)
All the lifecycle events that can be associated with a method in an entity listener can also be associated
directly with a method in an entity or mapped superclass (refer to Chapter 11). The pre-persist, postpersist,
pre-update, post-update, pre-remove, post-remove, and post-load methods are all valid
subelements of the entity or mapped-superclass elements. Each of them can occur only once in each
class. Each lifecycle event element will override any entity callback method of the same event type that
might be annotated in the entity class.

Before anyone goes out and overrides all their annotated callback methods with XML overrides, we
should mention that the use case for doing such a thing borders on, if not completely falls off into, the
non-existent.

<entity class="examples.model.Employee">
...
  <pre-persist method-name="initTransientState"/>
  <post-load method-name="initTransientState"/>
...
</entity>

Entity Listeners:

Lifecycle callback methods defined on a class other than the entity class are called entity listeners. The
following sections describe how to configure entity listeners in XML using the entity-listeners element
and how to exclude inherited and default listeners.

entity-listeners
One or more ordered entity listener classes can be defined in an @EntityListeners annotation on an
entity or mapped superclass

When a lifecycle event fires, the listeners that have
methods for the event will get invoked in the order in which they are listed. The entity-listeners
element can be specified as a subelement of an entity or mapped-superclass element to accomplish
exactly the same thing. It will also have the effect of overriding the entity listeners defined in an
@EntityListeners annotation with the ones defined in the entity-listeners element.

An entity-listeners element includes a list of ordered entity-listener subelements, each of
which defines an entity-listener class in its class attribute. For each listener, the methods
corresponding to lifecycle events must be indicated as subelement events. The events can be one or
more of pre-persist, post-persist, pre-update, post-update, pre-remove, post-remove, and post-load,
which correspond to the @PrePersist, @PostPersist, @PreUpdate, @PostUpdate, @PreRemove, @PostRemove,
and @PostLoad annotations, respectively. Each of the event subelements has a method-name attribute that
names the method to be invoked when its lifecycle event is triggered. The same method can be supplied
for multiple events, but no more than one event of the same type can be specified on a single listener
class.
The entity-listeners element can be used to disable all the entity listeners defined on a class or
just add an additional listener. Disabling listeners is not recommended, of course, because listeners
defined on a class tend to be fairly coupled to the class itself, and disabling them might introduce bugs
into either the class or the system as a whole.


<entity class="examples.model.Employee">
...
<entity-listeners>
  <entity-listener class="examples.listeners.EmployeeAuditListener">
    <post-persist method-name="employeeCreated"/>
    <post-update method-name="employeeUpdated"/>
    <post-remove method-name="employeeRemoved"/>
  </entity-listener>
  <entity-listener class="examples.listeners.NameValidator">
    <pre-persist method-name="validateName"/>
  </entity-listener>
  <entity-listener class="examples.listeners.EmployeeExitListener">
    <post-remove method-name="notifyIT"/>
  </entity-listener>
</entity-listeners>
...
</entity>


exclude-default-listeners
The set of default entity listeners that applies to all entities is defined in the entity-listeners
subelement of the persistence-unit-defaults element (see the entity-listeners section). These
listeners can be turned off or disabled for a particular entity or hierarchy of entities by specifying an
empty exclude-default-listeners element within the entity or mapped-superclass element. This is
equivalent to the @ExcludeDefaultListeners annotation, and if either one is specified for a class, default
listeners are disabled for that class. Note that exclude-default-listeners is an empty element, not a
Boolean. If default entity listeners are disabled for a class by an @ExcludeDefaultListeners annotation,
there is currently no way to re-enable them through XML


exclude-superclass-listeners
Entity listeners defined on the superclass of an entity will normally be fired before the entity listeners
defined on the entity class itself are fired

To disable the listeners defined on an
entity superclass or mapped superclass, an empty exclude-superclass-listeners element can be
supplied inside an entity or mapped-superclass element. This will disable the superclass listeners for the
managed class and all its subclasses.
The exclude-superclass-listeners element corresponds to the @ExcludeSuperclassListeners
annotation and, like the exclude-default-listeners/@ExcludeDefaultListeners pair, either one of the
two can be specified in order to disable the superclass listeners for the entity or mapped superclass and
its subclasses.



